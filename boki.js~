/**
 * @const sumTrialTbl0725 {string}
 * 合計試算表
 * 3列
 * 左から順に借方合計、勘定科目、貸方合計
 * null値というか内容が空白ならば"*"で表せ
 * 最後の締め切り線とか合計とかは書かない
 * そんなもん他の関数に書いてもらえ
 * 空白は0x20と\tと和字間隔"　"が使える
 */
const sumTrialTbl0725=`\
  898,000 C             320,000
1,290,000 当座預金    1,140,000
1,270,000 受取手形      710,000
1596000   売掛金　　516,000
350000　繰越商品 *
300000 備品 *
510000 支払手形 1048000
432000 買掛金 1395000
* 社会保険預り金 10000
* 借入金 500000
* 資本金 1,100,000
* 利益準備金 200,000
* 繰越利益剰余金 190000
40,000 売上 2,860,000
2,330,000 仕入 60,000
540000 給料 *
380000 支払家賃 *
 75000 保険料 *
 24000 法定福利費 *
 14000 支払利息 *
`;

/**
 * @const journal {string}
 * 仕訳帳
 * 3列
 * [<>]、科目、金額
 * これに従わない行はコメント扱い
 * 借方取引なら"<"、貸方科目なら">"と1列目に書く
 * 売掛金や買掛金については取引相手を@で続ける
 */
const journal=`\
26日
< 売掛金@京都 230,000
< 売掛金@愛知 160,000
> 売上 390,000
< 仕入 380,000
> 買掛金@沖縄 130,000
> 買掛金@宮崎 250,000
< 受取手形 260,000
> 売掛金@京都 260,000
< 買掛金@徳島 160,000
> 支払手形 160,000
27日
休業日
28日
< 仕入 350,000
> 買掛金@沖縄 190,000
> 買掛金@徳島 160,000
< 当座預金 100,000
> 売掛金@大阪 100000
< 買掛金@沖縄 300,000
> 当座預金 300,000
< 給料 260,000
> 社会保険預り金 10,000
> C 250,000
29日
< 売掛金@大阪 250,000
< 売掛金@愛知 190,000
> 売上 440,000
< 買掛金@沖縄 20,000
> 仕入 20,000
< 法定福利費 10,000
< 社会保険預り金 10,000
> C 20,000
< 支払家賃 190,000
> 当座預金 190,000
30日
< 売掛金@京都 160,000
< 売掛金@愛知 100,000
> 売上 260,000
< 当座預金 350,000
> 売掛金@愛知 350,000
< 支払手形 320,000
> 当座預金 320,000
< 借入金 250,000
< 支払利息 3,000
> 当座預金 253,000
31日
< 売掛金@大阪 220,000
> 売上 220,000
< 仕入 410,000
> 買掛金@宮崎 160,000
> 買掛金@徳島県 250,000
< 受取手形 350,000
> 売掛金@京都 350,000
< 当座預金 300,000
> 売掛金@大阪 300,000
< 保険料 25,000
> C 25,000
< 借入金 1500000
> 当座預金 1500000
`;

/**
 * @function fmtSumTrialTbl(txt)
 * @param txt {string}
 * @return {array}
 * 合計試算表を配列にするし最終要素に合計を追加する
 * 各要素は[借り方合計,科目,貸し方合計]
 */
function fmtSumTrialTbl(txt){
	// first make a table 
	const tbl = (
	txt.split(/\n+/)
	  .filter(row=>row.match(/[^ \t　]/))
	  .map(row=>row.trim())
		.map(row=>row.split(/[ \t　]+/))
		.map(row=>{
			const [borrow, item, lent] = row;
			
			const toInt = s=>{
				// eliminate digit delimiters
				// "*" shall be converted to NaN once
				let n = Number.parseInt(s.replaceAll(",", ""));
				
				// "*" is 0
				if(Number.isNaN(n)){
					n = 0;
				}
				
				assert(n>=0, "合計が負になってる！");
				return n;
			}
			
			return [toInt(borrow), item, toInt(lent)]
		})
	); // tblWithoutSum
	
	let bSum=0, lSum=0;
	tbl.forEach(([b,_,l])=>{
		bSum+=b; lSum+=l;
	});
	
	const finalCol = [bSum, "*", lSum];
	tbl.push(finalCol);
	return tbl;
} // fmtSumTrialTbl()

/**
 * @function fmtJournal()
 * 仕訳帳を配列にする
 */
function fmtJournal(txt){
	const validRows = (
	txt.split(/\n+/)
		.map(row=>row.trim())
		.map(row=>row.split(/[ \t　]+/))
		.filter(row=>{
			if(row.length!==3) return false;
			const [lr, item, v] = row;
			switch(lr){
			default:
				return false;
			case "<":
			case ">":
				return true;
			}
		})
	);
	return validRows
} // fmtBsTbl

var z=fmtSumTrialTbl(sumTrialTbl0725)
if(1){
	// ヘッダ
	console.log("合計試算表(X1年7月25日)")
	
	// 必要な桁数
	let requiredDigitsForBorrow = 1;
	let requiredDigitsForLent = 1;
	z.map(([b, _, l]) => b)
		.map(b => b.toString().length)
		.sort((a, b) => +a <=> +b)
		.

	// 本文
	z.forEach(row=>{
		const item=row[1];
		switch(item){case"*":console.log("----")}
		console.log(row);
		switch(item){case"*":console.log("====")}
	});
}
var z=fmtJournal(journal);
if(1){
	z.forEach(row=>{
		console.log(row)
	});
}
/**
 * @function assert()
 * @param  {...any} args
 * @returns とくにない
 */
function assert(...args){
	if(typeof console.assert === "function")
	  return console.assert(...args);
	const [test, errorMessage] = args;
	if(!test)
	  throw new Error(`Assertion failed: ${errorMessage}`);
}
